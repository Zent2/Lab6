/*
 * File:   mainc.c
 * Author: Christian Campos 21760
 *
 * Created on 27 de marzo de 2023, 12:12 AM
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <stdint.h>
#define _tmr0_value 200
#define _XTAL_FREQ 8000000
//Variables del programa
int i;
char VALOR1, VALOR2, VALORC, VALORD, VALORU; 

//Subrutina de interrupción
void __interrupt () isr (void){

    //Interrupción cambio en entradas Analógicas
    if (ADIF==1) {
        ADIF=0; //Limpiamos bandera
        ADCON0bits.GO=1; //Iniciamos la conversión
        //Primero verificamos cual de las 2 entradas analógicas es la que está haciendo la conversión
        if (ADCON0bits.CHS==0b0001){
        //La primera entrada (AN0) controla el contador en el PORTB
        PORTB=ADRESH; 
        __delay_ms(10);
        ADCON0bits.CHS=0b0000; //Cambiamos la entraga analógica
        }
        else if(ADCON0bits.CHS==0b0000) {
            //La segunda entrada controla el de los displays
            VALOR1=ADRESH; //Valor del ADC
            VALOR2=(VALOR1)*500/255; //Conversión a voltaje
            
            //Como solo estamos usando parte del ADRESH (8 de 10 bits) hay que hacer una pequeña conversión extra
            if (VALOR1>131){
            VALORC = ((VALOR2+260)/ 100);
            VALORD = ((VALOR2+60)/ 10) % 10;
            VALORU = (VALOR2)% 10;
            }
            else { //Esta es la conversión normal
            VALORC = (VALOR2/ 100); //Toma el valor de la centena
            VALORD = (VALOR2/ 10) % 10; //Toma el valor de la decena
            VALORU = (VALOR2 % 10); //Toma el valor de la Unidad
            }
            
            //Display 
            PORTD=0b1111; //Inician todos apagados
            __delay_ms(500);
            PORTC=VALORU; //Movemos el valor de las unidades al PORTC
            PORTD=0b1110; //Lo mostramos en el primer display (el bit3 controla el punto)
            __delay_ms(500);
            
            PORTC=VALORD;//Movemos el valor de las decenas al PORTC
            PORTD=0b1101; //Lo mostramos en el siguiente display
            __delay_ms(500);
            
            PORTC=VALORC; //Movemos el valor de las centenas al PORTC
            PORTD=0b0011; //Se enciende el punto y el último display
        
        
        __delay_ms(500);
        ADCON0bits.CHS=0b0001; //Cambiamos la entrada analógica
        }

    }
}

void setup (void);
void main(void) {
    setup();
    ADCON0bits.GO=1; //Inicia conversión ADC
    while (1){
      //Solo pasa el tiempo 
    }
}
void setup (void){
    //Entradas y salidas
    TRISB=0;
    TRISD=0b11110000;
    TRISC=0b11110000;
    OSCCONbits.IRCF=0b111; //8MHz
    OSCCONbits.SCS=1;
    
  /*  //Configuracion TMR0
    OPTION_REGbits.T0CS=0;
    OPTION_REGbits.PSA=0;
    OPTION_REGbits.PS=0b111;
    TMR0 = _tmr0_value;*/
    
    
    //Configuracion de interrupciones
    //INTCONbits.T0IF =0;
    //INTCONbits.T0IE=1;
    INTCONbits.PEIE=1; //Enable de la interrupción 
    
    INTCONbits.GIE=1;
    ADIF=0; //Bandera inicia en 0
    PIE1bits.ADIE=1;
   
 
    
    //config ADC
    ANSEL=0b00000011; //Entradas analógicas (AN0, AN1)
    TRISA=0b00000011;
    PORTA=0b00000011;
    ADCON0bits.ADCS=0b10;
    //ADCON0bits.CHS= 1;
    ADCON1bits.ADFM=0;
    __delay_ms(10);
    
    ADCON1bits.VCFG0=0;
    ADCON1bits.VCFG1=0;
    ADCON0bits.ADON=1;
    
    
    
    
} 
